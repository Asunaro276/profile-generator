// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controller

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserGenerator creates a new instance of MockUserGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserGenerator {
	mock := &MockUserGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserGenerator is an autogenerated mock type for the UserGenerator type
type MockUserGenerator struct {
	mock.Mock
}

type MockUserGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserGenerator) EXPECT() *MockUserGenerator_Expecter {
	return &MockUserGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockUserGenerator
func (_mock *MockUserGenerator) Generate(results int, seed int64, page int, gender string) (string, error) {
	ret := _mock.Called(results, seed, page, gender)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int64, int, string) (string, error)); ok {
		return returnFunc(results, seed, page, gender)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int64, int, string) string); ok {
		r0 = returnFunc(results, seed, page, gender)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(int, int64, int, string) error); ok {
		r1 = returnFunc(results, seed, page, gender)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockUserGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - results
//   - seed
//   - page
//   - gender
func (_e *MockUserGenerator_Expecter) Generate(results interface{}, seed interface{}, page interface{}, gender interface{}) *MockUserGenerator_Generate_Call {
	return &MockUserGenerator_Generate_Call{Call: _e.mock.On("Generate", results, seed, page, gender)}
}

func (_c *MockUserGenerator_Generate_Call) Run(run func(results int, seed int64, page int, gender string)) *MockUserGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int64), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MockUserGenerator_Generate_Call) Return(s string, err error) *MockUserGenerator_Generate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserGenerator_Generate_Call) RunAndReturn(run func(results int, seed int64, page int, gender string) (string, error)) *MockUserGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}
